type Query {
  animals: [Animal!]!
}

type Animal implements Node {
  id: ID!
  name: String!
  image: url!
  age: Int!
  metadata: AnimalMetadata!
}

interface Node {
  id: ID!
}

scalar url

type AnimalMetadata implements Node {
  id: ID!
  domain: String!
  kingdom: String!
  pyhlum: String!
  Class: String!
  superfamily: String!
  family: String!
}

type Mutation {
  addMetadata(input: MetadataInput!): AddAnimalPayload!
  removeMetadataById(pk: Int!): RemoveMetaDataPayload!
  removeAnimalByName(name: String!): RemoveMetaDataPayload!
  addAnimal(input: AnimalInput!): AddAnimalPayload!
}

type AddAnimalPayload {
  data: Animal
  error: String
}

input MetadataInput {
  domain: String!
  kingdom: String!
  pyhlum: String!
  Class: String!
  superfamily: String!
  family: String!
}

type RemoveMetaDataPayload {
  data: String
  error: String
}

input AnimalInput {
  name: String!
  image: url!
  age: Int!
  metadataId: ID = null
  metadataFamilyName: String = null
}